AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Bushevski Camper Rental Backend

Globals:
  Function:
    Runtime: python3.12
    Architectures:
      - arm64
    Timeout: 29 # API Gateway has a 30 second timeout
    MemorySize: 256
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: bushevski-rental
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_METRICS_NAMESPACE: BushevskiRental
    Layers:
      - !Ref CommonLayer

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  AdminApiKey:
    Type: String
    NoEcho: true
    Description: API Key for admin endpoints

Resources:
  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Auth:
        ApiKeyRequired: false # We'll enable this selectively for admin routes
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for Bushevski Rental API
          Quota:
            Limit: 5000
            Period: MONTH
          Throttle:
            BurstLimit: 100
            RateLimit: 50
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Api-Key'"
        AllowOrigin: "'*'" # TODO: Replace with actual frontend domain in prod
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

  # DynamoDB Table (Single-table design)
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub bushevski-${Stage}
      BillingMode: PAY_PER_REQUEST # Ensures zero-scale capability
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  # S3 Bucket for driver's licenses
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub bushevski-documents-${Stage}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      ServerSideEncryptionConfiguration:
        ServerSideEncryptionByDefault:
          SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 90

  # Lambda Layer for common code
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub bushevski-common-${Stage}
      Description: Common utilities and dependencies
      ContentUri: src/layers/common_layer
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

  # SSM Parameters
  TableNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /bushevski/dynamodb/table_name
      Type: String
      Value: !Ref DynamoDBTable
      Description: DynamoDB table name

  BucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /bushevski/s3/documents_bucket
      Type: String
      Value: !Ref DocumentsBucket
      Description: S3 bucket name for documents

  AdminApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /bushevski/admin/api_key
      Type: SecureString
      Value: !Ref AdminApiKey
      Description: API Key for admin endpoints

  # Lambda Functions
  AvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/availability
      Handler: app.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /availability
            Method: GET
            RestApiId: !Ref Api

  CreateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/bookings
      Handler: create.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /bookings
            Method: POST
            RestApiId: !Ref Api

  GetBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/bookings
      Handler: get.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /bookings/{id}
            Method: GET
            RestApiId: !Ref Api

  UploadLicenseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/bookings
      Handler: upload_license.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/s3/documents_bucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /bookings/{id}/drivers-license
            Method: PUT
            RestApiId: !Ref Api

  # Admin Functions
  ListBookingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/admin
      Handler: list_bookings.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/admin/api_key
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /admin/bookings
            Method: GET
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true

  UpdateBookingStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/admin
      Handler: update_status.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/admin/api_key
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /admin/bookings/{id}/status
            Method: PUT
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true

  CreatePricingRuleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/admin
      Handler: create_pricing_rule.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/admin/api_key
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /admin/pricing-rules
            Method: POST
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true

  CreateBlockedDateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/admin
      Handler: create_blocked_date.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/dynamodb/table_name
        - SSMParameterReadPolicy:
            ParameterName: !Sub /bushevski/admin/api_key
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /admin/blocked-dates
            Method: POST
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref DynamoDBTable
  DocumentsBucketName:
    Description: S3 bucket for documents
    Value: !Ref DocumentsBucket
